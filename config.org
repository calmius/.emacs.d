* Add files
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

* Better defaults
#+begin_src emacs-lisp
  ;;Defaults
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq make-backup-files nil)
  ;; (setq auto-save-default nil)
  (setq auto-save-list-file-prefix nil)
  (setq scroll-conservatively 100)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-subword-mode 1)
  (setq confirm-kill-emacs 'y-or-n-p)
  ;; Line highlighting
  (when window-system (global-hl-line-mode t))
  ;; Enable line number in prog mode
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; Column indicator
  (display-fill-column-indicator-mode)
  (add-hook 'org-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'prog-mode 'display-fill-column-indicator-mode)
  ;; GNU style indentation
  (setq c-default-style "linux"
        c-basic-offset 4)
  ;; IBuffer default
  (setq ibuffer-expert t)
  ;; Frame opacity
  (set-frame-parameter nil 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))
  ;; Reload config file
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
  ;; Run aliases in shell-command
  (setq shell-command-switch "-ic")
#+end_src

* Packages
** Convenience
*** Sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+end_src

*** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1))
#+end_src

*** Open in external app
#+begin_src emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (openwith-mode t)
    (setq openwith-associations
          '(("\\.pdf\\'" "zathura" (file))
            ("\\.epub\\'" "zathura" (file))
            ("\\.mkv\\'" "mpv" (file))
            ("\\.doc\\'" "onlyoffice-desktopeditors" (file)))))
#+end_src

** Tools
*** Xah-Fly-Keys
#+begin_src emacs-lisp
  (require 'xah-fly-keys)
  (xah-fly-keys-set-layout "colemak-dhm")
  ;; put this BEFORE loading xah fly keys
  ;; (setq xah-fly-use-control-key nil)
  (setq xah-fly-use-meta-key nil)
  (xah-fly-keys 1)
  ;; Custom
  (defun xah-insert-angle-bracket () (interactive) (xah-insert-bracket-pair "<" ">"))
  (global-set-key (kbd "<escape>") 'xah-fly-command-mode-activate)
  (define-key key-translation-map (kbd "C-e") (kbd "C-g"))
#+end_src

*** Latex
#+begin_src emacs-lisp
  (use-package auctex
    :ensure t
    :defer t
    :hook (LaTeX-mode .
                      (lambda ()
                        (push (list 'output-pdf "Zathura")
                              TeX-view-program-selection))))
#+end_src

*** Ssh
#+begin_src emacs-lisp
  (use-package ssh
    :ensure t)
  (add-hook 'ssh-mode-hook
            (lambda ()
              (setq ssh-directory-tracking-mode t)
              (shell-dirtrack-mode t)
              (setq dirtrackp nil)))

#+end_src

** Visual
*** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :bind
    ("s-h" . rainbow-mode))
#+end_src

*** Rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src

*** Mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  (setq doom-modeline-icon nil)
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-modal nil)
  (setq line-number-mode nil)
  #+end_src

* Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alhv")  ; -a to include hidden files, -l for long format, -h for human-readable sizes
  ;; Sort
  (defun xah-dired-sort ()
    (interactive)
    (let (xsortBy xarg)
      (setq xsortBy (completing-read "Sort by: " '( "date" "size" "name" )))
      (cond
       ((equal xsortBy "name") (setq xarg "-Alhv "))
       ((equal xsortBy "date") (setq xarg "-Alh -t"))
       ((equal xsortBy "size") (setq xarg "-Alh -S"))
       ((equal xsortBy "dir") (setq xarg "-Al --group-directories-first"))
       (t (error "logic error 09535" )))
      (dired-sort-other xarg )))
  (require 'dired )
  (define-key dired-mode-map (kbd "s") 'xah-dired-sort)
#+end_src

* Programmig
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-c g" . magit-dispatch)
    ("C-c f" . magit-file-dispatch))
#+end_src

** Comipilation
#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    "Apply ANSI color codes in the *compilation* buffer."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  (use-package recompile-on-save
    :ensure t)
  (recompile-on-save-advice compile)
  (use-package smart-compile
    :ensure t
    :bind
    ("C-u" . smart-compile))
#+end_src

** Language server protocol
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :bind (:map lsp-mode-map
                ("C-c d" . lsp-describe-thing-at-point)
                ("C-c j" . lsp-find-definition))
    :config
    (lsp-enable-which-key-integration t))

  (setq lsp-modeline-code-actions-enable nil)
#+end_src
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src

** Completions
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (company-tng-configure-default)
    (setq company-idle-delay 0.1
          company-minimum-prefix-lenght 1))
#+end_src

** Golang
*** go-mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook ((go-mode . lsp-deferred)
           (go-mode . company-mode))
    :bind (:map go-mode-map
                ("<f5>" . gofmt))
    :config
    (require 'lsp-go)
    ;; GOPATH/bin
    (add-to-list 'exec-path "~/Programming/golang/bin")
    ;; add imports
    (setq gofmt-command "goimports"))

  ;; Format(fmt) file on save
  (add-hook 'go-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'gofmt-before-save nil t)))
#+end_src

** Lua mode
#+begin_src emacs-lisp
  (use-package lua-mode
               :ensure t)

#+end_src

* Org mode
** Common settings
#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (setq org-structure-template-alist
        '(("el" . "src emacs-lisp\n")))
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+end_src

** Org-superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

** Org todo keywords
#+begin_src emacs-lisp
  (setq org-fast-tag-selection-include-todo t)
  ;; Custom State Keywords
  (setq org-use-fast-todo-selection t)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROJ(p)" "|" "DONE(d)")
          (sequence "TASK(T)")
          (sequence "AMOTIVATOR(MA)" "TMOTIVATOR(MT)" "CMOTIVATOR(MC)" "|")
          (sequence "WAITING(w@/!)" "INACTIVE(i)" "SOMEDAY(s)" "|" "CANCELLED(c@/!)")))
  ;; Custom colors for the keywords
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "red" :weight bold)
          ("TASK" :foreground "#5C888B" :weight bold)
          ("NEXT" :foreground "#5C999B" :weight bold)
          ("PROJ" :foreground "magenta" :weight bold)
          ("AMOTIVATOR" :foreground "#F06292" :weight bold)
          ("TMOTIVATOR" :foreground "#AB47BC" :weight bold)
          ("CMOTIVATOR" :foreground "#5E35B1" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("INACTIVE" :foreground "magenta" :weight bold)
          ("SOMEDAY" :foreground "cyan" :weight bold)
          ("CANCELLED" :foreground "forest green" :weight bold)))
#+end_src
